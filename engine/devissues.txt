- Miért így lett kialakítva a project struktúra?	
	ha az engine egy lib, akkor kívülről könnyebben használható az applikációk által
	és könnyebben lehet egy teszt frameworköt köréhúzni.

######################################################################
- Nem lehet boost::lockfree::queue-kat listába létrehozni
- Hogyan kell változó kapacitású queue-t létrehozni, 
	ha nincs megadva elszál az assertion
	
######################################################################
- Environment Változó Validation Layer felülírja a program oldali 
	Validation Layereket (egyszer fordult elő lib updatenél)
	
######################################################################
- Olyan képformátum kell amit a videókártya támogat (pl.:VK_FORMAT_R8G8B8A8_UNORM)
	Valamiért nem nagyon vannak támogatva az olyan formátumok amikben nincs alpha channel
	A videokártya csak 32 bites képeket eszik meg, amik nem azok azokat magasabb libek 
	átlakítják olyanra
- Képbetöltés: van Boost.GIL de ő csak egy absztrakciót ad képfileok betöltésére, különböző 
	típusú fileokhoz további .libek kellenek amiket lehet a gil-en keresztül használni. A GIL 
	magától csak jpeg-et tud nyitni.
		- Képproblémák megoldva az stb_image.h single-header file használatával ami lefed mindent és 
		auto konvertál RGBA bufferekre. Jobb lett volna boost de ez a light-weightebb és gyorsabb megoldás
		
######################################################################
- Boost.StrongTypeDef alapokon működik az egyedi azonosító kezelés
	- Copy/Paste után ki kellett egészíteni 1-2 dologgal hogy működjön Lua oldalról

######################################################################
- Több objektum megjelenítése? 
	- Dinimus UBO objektumok. 
		descriptor: VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC 
		Buffer oszályok méretének tágítása sok objektum elfogadására
		256 bites offset NVIDIA kártya miatt
		amikor rajzolára kerül az objektum újra kell bindolni a descriptorsetet és megadni 
			a jelenlegi UBO offsetet 
	- Dinamikus UBO csak akkor működik ha több pipeline van, az UBO ugyanis fix amikor 
	a shaderek futnak. Kevés Globális Konstants adathoz PushConstant-ok használata kell
	Ez általában max csak 128byteos buffer, mert a CommandBuffer része viszont így gyorsabban 
	el tudja érni a vulkan.
	- Dinamikus bármilyen adat átküldéséhez bufferek kellenek pl Transform Buffer ami a 
		TransformComponent és ezeket bindolni render időben
			
######################################################################
- Hogyan kell teljesen szeparálni a textúrákat a descriptor setektől inicializálás időben?
	A descriptor set írja le hogy milyen VkImage osztályon dolgozik jelenleg, inicializálás időben 
	viszont még nincsenek textúrák amiknek lennének képei. 
	- Textúrákat nem lehet teljesen szeparálni a descriptoroktól: A descriptort használja a 
	vulkan a megjelenítéshez viszont a descriptornak szüksége van egy textúra image viewra.
	- A megoldás: Minden egyes textúrának külön Image/ImageView/Descriptort létrehozni, 
	ezeket bindolni render időben a különböző objektumokhoz

#####################################################################
Mi egy jó megoldás a statikus osztályok példányainak leszármaztatására? 
	- Ami működik az egy, setInstanceType metódus deklarálása, amit inicializálás előtt
	meghív a gyermek project és a saját leszármaztatott típusát hozza létre. 
	- El lehet gondolkodni azon hogy egy alapvető renderer is hasonló módon keszüljön e el, lenne a 
	Renderer osztály és létezne egy Default renderer, így a Renderer osztály egy vékony statikus 
	"interface"-ként működhetne. Ez jó lenne abból a szempontból hogy a renderer.pp header file így 
	nagyon apró lenne, ami sose baj, viszont a leszármaztatott renderereknek sok hasonló dolgot kéne 
	újra deklarálniuk. Ha ez egy komolyabb szoftver lenne akkor ezt kéne használni rendes 
	leszármaztatásokkal, viszont nekünk elég ha a rajzoló függvényeket írjuk jelenleg felül, 
	ez a legegyszerűbb és leggyorsabb megoldás. 

####################################################################
Modularizált statikus osztályok: 
	A Banshee engine a singleton osztályait egy Module ősosztályon keresztül kezeli. 
	Ez azt jelenti hogy minden osztály képes adni egy közös interfacet. Ez hasznos lenne itt arra 
	hogy minden osztálynak lennének ilyen felülírható definiciói. Ez jelenleg nem kell, valószínüleg 
	a fejlesztés ideje alatt nem is fog, de továbbfejlesztési ötletnek jó.